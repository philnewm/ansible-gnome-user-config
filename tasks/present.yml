---

- name: Gather package facts
  ansible.builtin.package_facts:

- name: "Create default resolution path for {{ user }}"
  become: true
  become_user: "{{ user }}"
  ansible.builtin.file:
    path: "{{ gdm_monitor_config_user_path }}"
    state: directory
    mode: "0700"

- name: Set user default resolution
  become: true
  become_user: "{{ user }}"
  ansible.builtin.template:
    src: monitors.xml.j2
    dest: "{{ gdm_monitor_config_user_path }}/monitors.xml"
    mode: "0644"

- name: Get Gnome version
  become: true
  become_user: "{{ user }}"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gnome-shell --version | awk '{print $3}' | cut -d'.' -f1
  args:
    executable: /bin/bash
  register: gnome_major_version_result
  changed_when: false

- name: Set gnome major version
  become: true
  become_user: "{{ user }}"
  ansible.builtin.set_fact:
    gnome_major_version: "{{ gnome_major_version_result.stdout }}"

- name: "Configure basic gnome-settings for {{ user }}"
  become: true
  become_user: "{{ user }}"
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value | string }}"
  loop: "{{ gnome_base_settings[gnome_major_version] | dict2items }}"

- name: Set custom shortcut paths
  become: true
  become_user: "{{ user }}"
  community.general.dconf:
    key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
    value: "{{ shortcuts_list }}"
    state: present

- name: "Configure custom keyboard shortcuts for {{ user }}"
  when: enable_custom_keyboard_shortcuts
  loop: "{{ custom_keyboard_shortcuts }}"
  loop_control:
    label: "{{ shortcut.name }}"
    loop_var: shortcut
  ansible.builtin.include_tasks:
    file: keyboard_shortcuts.yml

- name: Get installed GNOME themes
  become: true
  become_user: "{{ user }}"
  ansible.builtin.find:
    paths: "{{ theme_paths }}"
    file_type: directory
    depth: 1
  register: theme_dirs

- name: Set themes list
  become: true
  become_user: "{{ user }}"
  ansible.builtin.set_fact:
    themes: "{{ theme_dirs.files | map(attribute='path') | map('basename') | list }}"

- name: "Set favorite apps for {{ user }}"
  ansible.builtin.include_tasks:
    file: favorite.yml

- name: "Configure found themes for {{ user }}"
  loop: "{{ gnome_theme_settings }}"
  loop_control:
    loop_var: theme_setting
  when: theme_setting.name in themes
  ansible.builtin.include_tasks:
    file: configure_themes.yml

- name: Get current flatpak overrides
  become: true
  become_user: "{{ user }}"
  ansible.builtin.command:
    cmd: flatpak override --show --user
  register: flatpak_overrides_result
  changed_when: false

- name: Set flatpak theme override
  become: true
  become_user: "{{ user }}"
  when: "'GTK_THEME=Adwaita:dark' not in flatpak_overrides_result.stdout_lines"
  ansible.builtin.command:
    cmd: flatpak override --user --env=GTK_THEME=Adwaita:dark
  register: flatpak_theme_result
  changed_when: flatpak_theme_result.rc == 0

- name: Get installed GNOME extensions
  become: true
  become_user: "{{ user }}"
  ansible.builtin.command:
    cmd: "ls {{ extension_path_system }}"
  register: extensions_list_result
  changed_when: false

- name: Set extensions list
  become: true
  become_user: "{{ user }}"
  ansible.builtin.set_fact:
    extensions: "{{ extensions_list_result.stdout_lines }}"

- name: "Enable installed extensions for {{ user }}"
  become: true
  become_user: "{{ user }}"
  community.general.dconf:
    key: "/org/gnome/shell/enabled-extensions"
    value: "{{ extensions | to_json }}"

- name: "Config found extensions {{ user }}"
  loop: "{{ gnome_extension_settings }}"
  loop_control:
    loop_var: extension_setting
  when: extension_setting.address in extensions
  ansible.builtin.include_tasks:
    file: configure_extensions.yml

- name: "Configure nautilus settings for {{ user }}"
  become: true
  become_user: "{{ user }}"
  loop: "{{ nautilus_settings[gnome_major_version] | dict2items }}"
  when: "'nautilus' in ansible_facts.packages"
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value | string }}"

- name: "Configure gedit for {{ user }}"
  when: "'gedit' in ansible_facts.packages"
  ansible.builtin.include_tasks:
    file: configure_gedit.yml

- name: "Configure terminal profile for {{ user }}"
  when: "'gnome-terminal' in ansible_facts.packages"
  ansible.builtin.include_tasks:
    file: configure_terminal.yml

- name: "Configure meld for {{ user }}"
  when: "'meld' in ansible_facts.packages"
  ansible.builtin.include_tasks:
    file: configure_meld.yml

...
