---

- name: Get Gnome version
  become: true
  become_user: "{{ user }}"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gnome-shell --version | awk '{print $3}' | cut -d'.' -f1
  args:
    executable: /bin/bash
  register: gnome_major_version
  changed_when: false

- name: Set gnome major version
  become: true
  become_user: "{{ user }}"
  ansible.builtin.set_fact:
    gnome_major_version: "{{ gnome_major_version.stdout }}"

- name: Get gnome base settings
  become: true
  become_user: "{{ user }}"
  loop: "{{ gnome_base_settings[gnome_major_version] | dict2items }}"
  community.general.dconf:
    key: "{{ item.key }}"
    state: read
  register: dconf_list

- name: Test gnome settings
  become: true
  become_user: "{{ user }}"
  loop: "{{ dconf_list.results }}"
  loop_control:
    loop_var: entry
    label: "{{ entry.item.key }}"
  ansible.builtin.assert:
    that:
      - entry.value == gnome_base_settings[gnome_major_version][entry.item.key]
    fail_msg: |
      "Expected value '{{ gnome_base_settings[gnome_major_version][entry.item.key] }}'
      but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'."
    quiet: true

- name: Get custom shortcut paths
  become: true
  become_user: "{{ user }}"
  community.general.dconf:
    key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
    state: "read"
  register: present_keyboard_shrotcuts

- name: Test Custom keyboard shortcuts
  ansible.builtin.assert:
    that: present_keyboard_shrotcuts.value == shortcuts_list
    fail_msg: "Failed to find expected keyboard shortcuts, got this: {{ present_keyboard_shrotcuts }}"
    quiet: true

- name: Combine all dconf_settings into one dictionary
  ansible.builtin.set_fact:
    all_ext_dconf_settings: "{{ gnome_extension_settings | map(attribute='dconf_settings') | list | combine }}"

- name: Get gnome extension settings
  become: true
  become_user: "{{ user }}"
  loop: "{{ all_ext_dconf_settings | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  community.general.dconf:
    key: "{{ item.key }}"
    state: read
  register: ext_dconf_value_list

- name: Test gnome extension settings
  become: true
  become_user: "{{ user }}"
  loop: "{{ ext_dconf_value_list.results }}"
  loop_control:
    loop_var: entry
    label: "{{ entry.item.key }}"
  ansible.builtin.assert:
    that:
      - entry.item.value == all_ext_dconf_settings[entry.item.key]
    fail_msg: "Expected value '{{ all_ext_dconf_settings[entry.item.key] }}' but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'."
    quiet: true

- name: Combine all dconf_settings into one dictionary
  ansible.builtin.set_fact:
    all_theme_dconf_settings: "{{ gnome_theme_settings | map(attribute='dconf_settings') | list | combine }}"

- name: Get gnome theme settings
  become: true
  become_user: "{{ user }}"
  loop: "{{ all_theme_dconf_settings | dict2items }}"
  community.general.dconf:
    key: "{{ item.key }}"
    state: read
  register: theme_dconf_value_list

- name: Test gnome theme settings
  become: true
  become_user: "{{ user }}"
  loop: "{{ theme_dconf_value_list.results }}"
  loop_control:
    loop_var: entry
    label: "{{ entry.item.key }}"
  ansible.builtin.assert:
    that:
      - entry.item.value == all_theme_dconf_settings[entry.item.key]
    fail_msg: "Expected value '{{ all_theme_dconf_settings[entry.item.key] }}' but got '{{ entry.value }}' instead for key '{{ entry.item.key }}'."
    quiet: true

- name: Test nautilus settings
  become: true
  become_user: "{{ user }}"
  when: "'nautilus' in ansible_facts.packages"
  block:
    - name: Get nautilus settings
      loop: "{{ nautilus_settings[gnome_major_version].keys() }}"
      community.general.dconf:
        key: "{{ item }}"
        state: read
      register: dconf_list

    - name: Test nautilus settings
      loop: "{{ dconf_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item }}"
      ansible.builtin.assert:
        that:
          - entry.value == nautilus_settings[gnome_major_version][entry.item]
        fail_msg: |
          "Expected value '{{ nautilus_settings[gnome_major_version][entry.item] }}'
          but got '{{ entry.value }}' instead for key '{{ entry.item }}'."
        quiet: true

- name: Test gedit settings
  become: true
  become_user: "{{ user }}"
  when: "'gedit' in ansible_facts.packages"
  block:
    - name: Get gedit settings
      loop: "{{ gedit_settings.keys() }}"
      community.general.dconf:
        key: "{{ item }}"
        state: read
      register: dconf_list

    - name: Test gedit settings
      loop: "{{ dconf_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item }}"
      ansible.builtin.assert:
        that:
          - entry.value == gedit_settings[entry.item]
        fail_msg: |
          "Expected value '{{ gedit_settings[entry.item] }}'
          but got '{{ entry.value }}' instead for key '{{ entry.item }}'."
        quiet: true

- name: Test gnome-terminal settings
  become: true
  become_user: "{{ user }}"
  when: "'gnome-terminal' in ansible_facts.packages"
  block:
    - name: Get terminal settings
      loop: "{{ gnome_terminal_settings.keys() }}"
      community.general.dconf:
        key: "{{ item }}"
        state: read
      register: dconf_list

    - name: Test terminal settings
      loop: "{{ dconf_list.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item }}"
      ansible.builtin.assert:
        that:
          - entry.value | string == gnome_terminal_settings[entry.item] | string
        fail_msg: |
          "Expected value '{{ gnome_terminal_settings[entry.item] }}'
          but got '{{ entry.value }}' instead for key '{{ entry.item }}'."
        quiet: true

    - name: Get terminal profile settings
      loop: "{{ terminal_profile_settings.keys() }}"
      community.general.dconf:
        key: "{{ terminal_profile_path }}/{{ item }}"
        state: read
      register: profile_settings

    - name: Test terminal profile settings
      loop: "{{ profile_settings.results }}"
      loop_control:
        loop_var: entry
        label: "{{ entry.item }}"
      ansible.builtin.assert:
        that:
          - entry.value | string == terminal_profile_settings[entry.item] | string
        fail_msg: |
          "Expected value '{{ terminal_profile_settings[entry.item] }}'
          but got '{{ entry.value }}' instead for key '{{ entry.item }}'."
        quiet: true

- name: Read user session resolution_x
  community.general.xml:
    path: "{{ gdm_monitor_config_user_path }}/monitors.xml"
    xpath: '/monitors/configuration/logicalmonitor/monitor/mode/width'
    content: text
  register: user_width_value

- name: Read user session resolution_y
  community.general.xml:
    path: "{{ gdm_monitor_config_user_path }}/monitors.xml"
    xpath: '/monitors/configuration/logicalmonitor/monitor/mode/height'
    content: text
  register: user_height_value

- name: Verify expected user session resolution
  ansible.builtin.assert:
    that:
      - user_width_value.matches[0].width | int == gdm_default_resolution_x
      - user_height_value.matches[0].height | int == gdm_default_resolution_y
    fail_msg: >
      "A user session resolution of {{ gdm_default_resolution_x }}x
      {{ gdm_default_resolution_y }} was expected, got
        {{ user_width_value.matches[0] }}x{{ user_height_value.matches[0] }}
        instead"

...
